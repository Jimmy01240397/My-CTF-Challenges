import socket
import ssl
import subprocess
import re
import sys

if len(sys.argv) <= 1:
    print(f"usage: {sys.argv[0]} <ELF file>")
    exit()

flag = b'\x00'*36
objdump = subprocess.run(f"objdump -d {sys.argv[1]}", shell=True, capture_output=True, text=True).stdout

def getrop():
    checkdata = b'\x00'*48

    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    sock = ssl.wrap_socket(sock)
    sock.connect(("capoost.chummydns.com", 8741))

    sock.send(int(re.findall('0+([0-9a-f]+)\s*<main>:', objdump)[0], 16).to_bytes(8, 'little'))
    sock.send(int(0).to_bytes(8, 'little'))
    sock.send(checkdata)
    data = sock.recv(0x2000)
    sock.close()

    return data

def ROPtoasm(rop):
    onpop = False
    popreg = ""
    allasm = []
    for a in range(0, len(rop), 0x8):
        nowmem = int.from_bytes(rop[a:a+8], 'little')
        hexmem = hex(nowmem).replace('0x', '')
        if nowmem < 0x12ad:
            if onpop:
                allasm.append(f"mov    ${hex(nowmem)},{popreg}")
                onpop = False
                popreg = ""
#        print(hexmem)
        else:
            asm = re.findall(f"\s*{hexmem}:\s+([a-f0-9]{{2}}\s)+\s*(.*)\n", objdump)[0][1]
            if "pop" in asm:
                popreg = re.findall("pop\s+(.*)", asm)[0]
                onpop = True
            elif asm != "leave":
                allasm.append(asm)
    return allasm

def genreversecode(allasm):
    allasm.reverse()
    buflen = 0x100
    checkdatalen = 0x30

    asmreplace = {
        "mov": "mov",
        "ror": "rol",
        "rol": "ror",
        "add": "sub",
        "sub": "add",
        "xor": "xor"
    }

    oncalc = False
    onsetaddr = False
    asmtmp = None
    setaddrparmidx = 0

    inlineasm = []

    for a in allasm:
        anaasm = list(re.findall("(\S*)\s+(\S*),(\S*)", a)[0])
        anaasm[0] = asmreplace[anaasm[0]]
        if onsetaddr:
            onsetaddr = False
            if anaasm[0] != "mov":
                print("error")
                continue
            num = int(anaasm[1].strip('$'), 16)
            num = -((buflen + checkdatalen) - num)
            asmtmp[setaddrparmidx] = f'{hex(num)}(%rbp)'
            anaasm = asmtmp
        elif oncalc:
            oncalc = False
            inlineasm.append(f'"{anaasm[0]} {anaasm[1]},{anaasm[2]}\\n\\t"')
            anaasm = asmtmp
        else:
            for b in range(1,3):
                if '(' in anaasm[b]:
                    onsetaddr = True
                    asmtmp = anaasm
                    setaddrparmidx = b
                    break
            if onsetaddr:
                continue
            if anaasm[0] in ['ror', 'rol', 'add', 'sub', 'xor']:
                oncalc = True
                asmtmp = anaasm
                continue
        if anaasm[0] == "mov" and '$' not in anaasm[1]:
            anaasm[1], anaasm[2] = anaasm[2], anaasm[1]
        inlineasm.append(f'"{anaasm[0]} {anaasm[1]},{anaasm[2]}\\n\\t"')

    code = """
#include<stdio.h>
    int main() {
        char buf["""+str(buflen)+"""];
        char checkdata["""+str(checkdatalen)+"""] = {0};
        __asm__(
            """+'\n'.join(inlineasm)+"""
        );
        write(1, buf, """+str(buflen)+""");
    }
    """
    return code

def getflag():
    global flag
    data = getrop()
    allasm = ROPtoasm(data)
    code = genreversecode(allasm)

    with open(".tmp.c", 'w') as f:
        f.write(code)

    subprocess.run("gcc .tmp.c", shell=True, capture_output=True)
    ans = subprocess.run("./a.out", shell=True, capture_output=True).stdout

    flag = bytearray(flag)
    for a in range(len(flag)):
        if flag[a] == 0:
            flag[a] = ans[a]
    flag = bytes(flag)


while 0 in flag:
    getflag()
    print(flag)

print(flag)
